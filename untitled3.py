# -*- coding: utf-8 -*-
"""Untitled3.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1bLN8qpeh8pxFuxYYlo0ECyPKz-7-LaWG
"""

# Importing libraries
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from statsmodels.tsa.arima.model import ARIMA
import plotly.express as px

# Load the dataset into a pandas DataFrame
file_path = 'c:/Users/786/Downloads/area-sown-production-and-yield-per-hectare-of-wheat-by-districts-punjab-yield-per-hectare-in-kg-.csv'
data = pd.read_csv(file_path)

# Display the first few rows of the data
data.head()

# Rename columns for clarity
data.columns = ['District/Division', '2007-08', '2008-09', '2009-10', '2010-11', '2011-12', '2012-13', '2013-14', '2014-15', '2015-16', '2016-17', '2017-18', '2018-19', '2019-20']

# Convert all year columns to numeric values (in case there are commas or non-numeric values)
for col in data.columns[1:]:
    data[col] = pd.to_numeric(data[col].str.replace(',', ''), errors='coerce')

# Check for missing values
data.isnull().sum()

# Plot the wheat yield for the first few districts/divisions over the years
plt.figure(figsize=(14, 8))
for i in range(5):  # First 5 districts/divisions
    plt.plot(data.columns[1:], data.iloc[i, 1:], label=data.iloc[i, 0])
plt.title('Wheat Yield Trends Across Different Districts/Divisions')
plt.xlabel('Year')
plt.ylabel('Wheat Yield (kg per hectare)')
plt.legend()
plt.show()

# Forecasting wheat yield for a specific district (e.g., Bahawalpur Div.)
district_data = data[data['District/Division'] == 'Bahawalpur Div.'].iloc[0, 1:].values

# Convert district_data to numeric type, handling potential errors
district_data = pd.to_numeric(district_data, errors='coerce')

# Fit ARIMA model
model = ARIMA(district_data, order=(5, 1, 0))  # Adjust parameters if necessary
model_fit = model.fit()

# Forecast the next 5 years
forecast = model_fit.forecast(steps=5)
forecast_years = ['2020-21', '2021-22', '2022-23', '2023-24', '2024-25']

# Plotting the forecast
plt.figure(figsize=(10, 6))
plt.plot(data.columns[1:], district_data, label='Historical Data')
plt.plot(forecast_years, forecast, label='Forecasted Data', linestyle='--')
plt.title('Wheat Yield Forecast for Bahawalpur Div.')
plt.xlabel('Year')
plt.ylabel('Wheat Yield (kg per hectare)')
plt.legend()
plt.show()

# Prepare data for linear regression model
X = np.array([range(1, 15)]).T  # Years (from 2007-08 to 2019-20)
y = district_data  # Wheat yield for Bahawalpur Div.

# Train the model
model = LinearRegression()
model.fit(X, y)

# Predict future yields
future_years = np.array([range(15, 20)]).T
predictions = model.predict(future_years)

# Plot the regression line and predictions
plt.figure(figsize=(10, 6))
plt.plot(data.columns[1:], district_data, label='Historical Data')
plt.plot(range(15, 20), predictions, label='Predicted Yield', linestyle='--')
plt.title('Linear Regression: Wheat Yield Prediction for Bahawalpur Div.')
plt.xlabel('Year')
plt.ylabel('Wheat Yield (kg per hectare)')
plt.legend()
plt.show()

# Prepare data for linear regression model
# X should have the same number of samples as y (district_data)
# district_data has 13 samples, so X should have 13 as well
X = np.array([range(1, 14)]).T  # Years (from 2007-08 to 2018-19)
y = district_data  # Wheat yield for Bahawalpur Div.

# Train the model
model = LinearRegression()
model.fit(X, y)

# Predict future yields
# Adjust future_years to reflect the correct range
future_years = np.array([range(14, 19)]).T  # Predicting for 5 years ahead
predictions = model.predict(future_years)

# Plot the regression line and predictions
plt.figure(figsize=(10, 6))
plt.plot(data.columns[1:-1], district_data, label='Historical Data') # Exclude last year from data.columns
plt.plot(range(14, 19), predictions, label='Predicted Yield', linestyle='--')
plt.title('Linear Regression: Wheat Yield Prediction for Bahawalpur Div.')
plt.xlabel('Year')
plt.ylabel('Wheat Yield (kg per hectare)')
plt.legend()
plt.show()

# Prepare data for linear regression model
# X should have the same number of samples as y (district_data)
# district_data has 13 samples, so X should have 13 as well
X = np.array([range(1, 14)]).T  # Years (from 2007-08 to 2018-19)
y = district_data  # Wheat yield for Bahawalpur Div.

# Train the model
model = LinearRegression()
model.fit(X, y)

# Predict future yields
# Adjust future_years to reflect the correct range
future_years = np.array([range(14, 19)]).T  # Predicting for 5 years ahead
predictions = model.predict(future_years)

# Plot the regression line and predictions
plt.figure(figsize=(10, 6))
# data.columns[1:] has 13 elements, district_data has 13 elements.
# We were previously excluding the last element using [1:-1] resulting in 12 elements
# Now they both have 13 elements, fixing the error
plt.plot(data.columns[1:], district_data, label='Historical Data')
plt.plot(range(14, 19), predictions, label='Predicted Yield', linestyle='--')
plt.title('Linear Regression: Wheat Yield Prediction for Bahawalpur Div.')
plt.xlabel('Year')
plt.ylabel('Wheat Yield (kg per hectare)')
plt.legend()
plt.show()

# You can install Streamlit with the following command (if using in local environment)
!pip install streamlit

# Create a new file for the Streamlit app
with open('app.py', 'w') as f:
    f.write("""
import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
from statsmodels.tsa.arima.model import ARIMA
import numpy as np

# Placeholder for data loading.  Replace with your actual data loading.
data = pd.DataFrame() # Initialize an empty DataFrame


# clean and preprocess the data
try:
    data.columns = ['District/Division', '2007-08', '2008-09', '2009-10', '2010-11', '2011-12', '2012-13', '2013-14', '2014-15', '2015-16', '2016-17', '2017-18', '2018-19', '2019-20']
    for col in data.columns[1:]:
        data[col] = pd.to_numeric(data[col].str.replace(',', ''), errors='coerce')
except:
    st.write("Error: Could not process data. Please check the input data.")
    st.stop()


# Streamlit App Layout
st.title("Wheat Yield Analysis in Punjab")
try:
    district = st.selectbox('Select District/Division', data['District/Division'].unique())

    # Get the district data
    district_data = data[data['District/Division'] == district].iloc[0, 1:].values

    # Plot historical data
    st.subheader(f'Wheat Yield for {district} from 2007 to 2020')
    fig, ax = plt.subplots(figsize=(10, 6))
    ax.plot(data.columns[1:], district_data, label=f'{district}')
    ax.set_xlabel('Year')
    ax.set_ylabel('Wheat Yield (kg per hectare)')
    ax.set_title(f'Wheat Yield Trend for {district}')
    st.pyplot(fig)

    # Forecasting (ARIMA)
    st.subheader('Forecasting Wheat Yield for the Next 5 Years')
    model = ARIMA(district_data, order=(5, 1, 0))
    model_fit = model.fit()

    # Forecast the next 5 years
    forecast = model_fit.forecast(steps=5)
    forecast_years = ['2020-21', '2021-22', '2022-23', '2023-24', '2024-25']

    # Plotting the forecast
    fig, ax = plt.subplots(figsize=(10, 6))
    ax.plot(data.columns[1:], district_data, label='Historical Data')
    ax.plot(forecast_years, forecast, label='Forecast')
    ax.set_xlabel('Year')
    ax.set_ylabel('Wheat Yield (kg per hectare)')
    ax.set_title(f'Wheat Yield Forecast for {district}')
    ax.legend()
    st.pyplot(fig)
except Exception as e:
    st.write(f"An error occurred: {e}")
""")
import matplotlib.pyplot as plt
from statsmodels.tsa.arima.model import ARIMA
import numpy as np


# clean and preprocess the data
data.columns = ['District/Division', '2007-08', '2008-09', '2009-10', '2010-11', '2011-12', '2012-13', '2013-14', '2014-15', '2015-16', '2016-17', '2017-18', '2018-19', '2019-20']
for col in data.columns[1:]:
    data[col] = pd.to_numeric(data[col].str.replace(',', ''), errors='coerce')

# Streamlit App Layout
st.title("Wheat Yield Analysis in Punjab")
district = st.selectbox('Select District/Division', data['District/Division'].unique())

# Get the district data
district_data = data[data['District/Division'] == district].iloc[0, 1:].values

# Plot historical data
st.subheader(f'Wheat Yield for {district} from 2007 to 2020')
fig, ax = plt.subplots(figsize=(10, 6))
ax.plot(data.columns[1:], district_data, label=f'{district}')
ax.set_xlabel('Year')
ax.set_ylabel('Wheat Yield (kg per hectare)')
ax.set_title(f'Wheat Yield Trend for {district}')
st.pyplot(fig)

# Forecasting (ARIMA)
st.subheader('Forecasting Wheat Yield for the Next 5 Years')
model = ARIMA(district_data, order=(5, 1, 0))
model_fit = model.fit()

# Forecast the next 5 years
forecast = model_fit.forecast(steps=5)
forecast_years = ['2020-21', '2021-22', '2022-23', '2023-24', '2024-25']

# Plotting the forecast
fig, ax = plt.subplots(figsize=(10, 6))
ax.plot(data.columns[1:], district_data, label='Historical Data')

import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
from statsmodels.tsa.arima.model import ARIMA
import numpy as np

# Load the dataset into a pandas DataFrame
file_path = '/content/area-sown-production-and-yield-per-hectare-of-wheat-by-districts-punjab-yield-per-hectare-in-kg-.csv'  # Replace with your actual file path
data = pd.read_csv(file_path)

# clean and preprocess the data
data.columns = ['District/Division', '2007-08', '2008-09', '2009-10', '2010-11', '2011-12', '2012-13', '2013-14', '2014-15', '2015-16', '2016-17', '2017-18', '2018-19', '2019-20']
for col in data.columns[1:]:
    data[col] = pd.to_numeric(data[col].str.replace(',', ''), errors='coerce')

# Create a new file for the Streamlit app
with open('app.py', 'w') as f:
    f.write("""
# Streamlit App Layout
st.title("Wheat Yield Analysis in Punjab")
district = st.selectbox('Select District/Division', data['District/Division'].unique())

# Get the district data
district_data = data[data['District/Division'] == district].iloc[0, 1:].values

# Plot historical data
st.subheader(f'Wheat Yield for {district} from 2007 to 2020')
fig, ax = plt.subplots(figsize=(10, 6))
ax.plot(data.columns[1:], district_data, label=f'{district}')
ax.set_xlabel('Year')
ax.set_ylabel('Wheat Yield (kg per hectare)')
ax.set_title(f'Wheat Yield Trend for {district}')
st.pyplot(fig)

# Forecasting (ARIMA)
st.subheader('Forecasting Wheat Yield for the Next 5 Years')
model = ARIMA(district_data, order=(5, 1, 0))

# Forecast the next 5 years
forecast = model_fit.forecast(steps=5)
forecast_years = ['2020-21', '2021-22', '2022-23', '2023-24', '2024-25']

# Plotting the forecast
fig, ax = plt.subplots(figsize=(10, 6))
ax.plot(data.columns[1:], district_data, label='Historical Data')
ax.plot(forecast_years, forecast, label='Forecasted Data', linestyle='--')
ax.set_xlabel('Year')
ax.set_ylabel('Wheat Yield (kg per hectare)')
ax.set_title(f'Forecast for {district} (Next 5 Years)')
st.pyplot(fig)
    """)

!streamlit run app.py



